/*!

=========================================================
* Argon Dashboard - v1.1.0
=========================================================

* Product Page: https://www.creative-tim.com/product/argon-dashboard
* Copyright 2018 Creative Tim (https://www.creative-tim.com)
* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard/blob/master/LICENSE.md)

* Coded by www.creative-tim.com

=========================================================

* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

*/
"use strict";
window.$a=null;
var map, lat, lng, Datepicker = function() {
        var e = $(".datepicker");
        e.length && e.each(function() {
            ! function(e) {
                e.datepicker({
                    disableTouchKeyboard: !0,
                    autoclose: !1
                })
            }($(this))
        })
    }(),
    CopyIcon = function() {
        var e, a = ".btn-icon-clipboard",
            t = $(a);
        t.length && ((e = t).tooltip().on("mouseleave", function() {
            e.tooltip("hide")
        }), new ClipboardJS(a).on("success", function(e) {
            $(e.trigger).attr("title", "Copied!").tooltip("_fixTitle").tooltip("show").attr("title", "Copy to clipboard").tooltip("_fixTitle"), e.clearSelection()
        }))
    }(),
    FormControl = function() {
        var e = $(".form-control");
        e.length && e.on("focus blur", function(e) {
            $(this).parents(".form-group").toggleClass("focused", "focus" === e.type || 0 < this.value.length)
        }).trigger("blur")
    }(),
    $map = $("#map-canvas"),
    color = "#5e72e4";

function initMap() {
    map = document.getElementById("map-canvas"), lat = map.getAttribute("data-lat"), lng = map.getAttribute("data-lng");
    var e = new google.maps.LatLng(lat, lng),
        a = {
            zoom: 12,
            scrollwheel: !1,
            center: e,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            styles: [{
                featureType: "administrative",
                elementType: "labels.text.fill",
                stylers: [{
                    color: "#444444"
                }]
            }, {
                featureType: "landscape",
                elementType: "all",
                stylers: [{
                    color: "#f2f2f2"
                }]
            }, {
                featureType: "poi",
                elementType: "all",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "road",
                elementType: "all",
                stylers: [{
                    saturation: -100
                }, {
                    lightness: 45
                }]
            }, {
                featureType: "road.highway",
                elementType: "all",
                stylers: [{
                    visibility: "simplified"
                }]
            }, {
                featureType: "road.arterial",
                elementType: "labels.icon",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "transit",
                elementType: "all",
                stylers: [{
                    visibility: "off"
                }]
            }, {
                featureType: "water",
                elementType: "all",
                stylers: [{
                    color: color
                }, {
                    visibility: "on"
                }]
            }]
        };
    map = new google.maps.Map(map, a);
    var t = new google.maps.Marker({
            position: e,
            map: map,
            animation: google.maps.Animation.DROP,
            title: "Hello World!"
        }),
        o = new google.maps.InfoWindow({
            content: '<div class="info-window-content"><h2>Argon Dashboard</h2><p>A beautiful Dashboard for Bootstrap 4. It is Free and Open Source.</p></div>'
        });
    google.maps.event.addListener(t, "click", function() {
        o.open(map, t)
    })
}
$map.length && google.maps.event.addDomListener(window, "load", initMap);
var Navbar = function() {
        var a = $(".navbar-nav, .navbar-nav .nav"),
            t = $(".navbar .collapse"),
            e = $(".navbar .dropdown");
        t.on({
            "show.bs.collapse": function() {
                ! function(e) {
                    e.closest(a).find(t).not(e).collapse("hide")
                }($(this))
            }
        }), e.on({
            "hide.bs.dropdown": function() {
                ! function(e) {
                    var a = e.find(".dropdown-menu");
                    a.addClass("close"), setTimeout(function() {
                        a.removeClass("close")
                    }, 200)
                }($(this))
            }
        })
    }(),
    NavbarCollapse = function() {
        $(".navbar-nav");
        var e = $(".navbar .collapse");
        e.length && (e.on({
            "hide.bs.collapse": function() {
                ! function(e) {
                    e.addClass("collapsing-out")
                }(e)
            }
        }), e.on({
            "hidden.bs.collapse": function() {
                ! function(e) {
                    e.removeClass("collapsing-out")
                }(e)
            }
        }))
    }(),
    noUiSlider = function() {
        if ($(".input-slider-container")[0] && $(".input-slider-container").each(function() {
                var e = $(this).find(".input-slider"),
                    a = e.attr("id"),
                    t = e.data("range-value-min"),
                    o = e.data("range-value-max"),
                    n = $(this).find(".range-slider-value"),
                    r = n.attr("id"),
                    l = n.data("range-value-low"),
                    i = document.getElementById(a),
                    s = document.getElementById(r);
                noUiSlider.create(i, {
                    start: [parseInt(l)],
                    connect: [!0, !1],
                    range: {
                        min: [parseInt(t)],
                        max: [parseInt(o)]
                    }
                }), i.noUiSlider.on("update", function(e, a) {
                    s.textContent = e[a]
                })
            }), $("#input-slider-range")[0]) {
            var e = document.getElementById("input-slider-range"),
                a = document.getElementById("input-slider-range-value-low"),
                t = document.getElementById("input-slider-range-value-high"),
                o = [a, t];
            noUiSlider.create(e, {
                start: [parseInt(a.getAttribute("data-range-value-low")), parseInt(t.getAttribute("data-range-value-high"))],
                connect: !0,
                range: {
                    min: parseInt(e.getAttribute("data-range-value-min")),
                    max: parseInt(e.getAttribute("data-range-value-max"))
                }
            }), e.noUiSlider.on("update", function(e, a) {
                o[a].textContent = e[a]
            })
        }
    }(),
    Popover = function() {
        var e = $('[data-toggle="popover"]'),
            t = "";
        e.length && e.each(function() {
            ! function(e) {
                e.data("color") && (t = "popover-" + e.data("color"));
                var a = {
                    trigger: "focus",
                    template: '<div class="popover ' + t + '" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
                };
                e.popover(a)
            }($(this))
        })
    }(),
    ScrollTo = function() {
        var e = $(".scroll-me, [data-scroll-to], .toc-entry a");
        e.length && e.on("click", function() {
            ! function(e) {
                var a = e.attr("href"),
                    t = e.data("scroll-to-offset") ? e.data("scroll-to-offset") : 0,
                    o = {
                        scrollTop: $(a).offset().top - t
                    };
                $("html, body").stop(!0, !0).animate(o, 600), event.preventDefault()
            }($(this))
        })
    }(),
    Tooltip = function() {
        var e = $('[data-toggle="tooltip"]');
        e.length && e.tooltip()
    }(),
    Charts = function() {
        var e, a = $('[data-toggle="chart"]'),
            t = "light",
            o = {
                base: "Open Sans"
            },
            n = {
                gray: {
                    100: "#f6f9fc",
                    200: "#e9ecef",
                    300: "#dee2e6",
                    400: "#ced4da",
                    500: "#adb5bd",
                    600: "#8898aa",
                    700: "#525f7f",
                    800: "#32325d",
                    900: "#212529"
                },
                theme: {
                    default: "#172b4d",
                    primary: "#5e72e4",
                    secondary: "#f4f5f7",
                    info: "#11cdef",
                    success: "#2dce89",
                    danger: "#f5365c",
                    warning: "#fb6340"
                },
                black: "#12263F",
                white: "#FFFFFF",
                transparent: "transparent"
            };

        function r(e, a) {
            for (var t in a) "object" != typeof a[t] ? e[t] = a[t] : r(e[t], a[t])
        }

        function l(e) {
            var a = e.data("add"),
                t = $(e.data("target")).data("chart");
            e.is(":checked") ? function e(a, t) {
                for (var o in t) Array.isArray(t[o]) ? t[o].forEach(function(e) {
                    a[o].push(e)
                }) : e(a[o], t[o])
            }(t, a) : function e(a, t) {
                for (var o in t) Array.isArray(t[o]) ? t[o].forEach(function() {
                    a[o].pop()
                }) : e(a[o], t[o])
            }(t, a), t.update()
        }

        function i(e) {
            var a = e.data("update"),
                t = $(e.data("target")).data("chart");
            r(t, a),
                function(e, a) {
                    if (void 0 !== e.data("prefix") || void 0 !== e.data("prefix")) {
                        var r = e.data("prefix") ? e.data("prefix") : "",
                            l = e.data("suffix") ? e.data("suffix") : "";
                        a.options.scales.yAxes[0].ticks.callback = function(e) {
                            if (!(e % 10)) return r + e + l
                        }, a.options.tooltips.callbacks.label = function(e, a) {
                            var t = a.datasets[e.datasetIndex].label || "",
                                o = e.yLabel,
                                n = "";
                            return 1 < a.datasets.length && (n += '<span class="popover-body-label mr-auto">' + t + "</span>"), n += '<span class="popover-body-value">' + r + o + l + "</span>"
                        }
                    }
                }(e, t), t.update()
        }
        return window.Chart && r(Chart, (e = {
            defaults: {
                global: {
                    responsive: !0,
                    maintainAspectRatio: !1,
                    defaultColor: n.gray[600],
                    defaultFontColor: n.gray[600],
                    defaultFontFamily: o.base,
                    defaultFontSize: 13,
                    layout: {
                        padding: 0
                    },
                    legend: {
                        display: !1,
                        position: "bottom",
                        labels: {
                            usePointStyle: !0,
                            padding: 16
                        }
                    },
                    elements: {
                        point: {
                            radius: 0,
                            backgroundColor: n.theme.primary
                        },
                        line: {
                            tension: .4,
                            borderWidth: 4,
                            borderColor: n.theme.primary,
                            backgroundColor: n.transparent,
                            borderCapStyle: "rounded"
                        },
                        rectangle: {
                            backgroundColor: n.theme.warning
                        },
                        arc: {
                            backgroundColor: n.theme.primary,
                            borderColor: n.white,
                            borderWidth: 4
                        }
                    },
                    tooltips: {
                        enabled: !1,
                        mode: "index",
                        intersect: !1,
                        custom: function(o) {
                            var e = $("#chart-tooltip");
                            if (e.length || (e = $('<div id="chart-tooltip" class="popover bs-popover-top" role="tooltip"></div>'), $("body").append(e)), 0 !== o.opacity) {
                                if (o.body) {
                                    var a = o.title || [],
                                        n = o.body.map(function(e) {
                                            return e.lines
                                        }),
                                        r = "";
                                    r += '<div class="arrow"></div>', a.forEach(function(e) {
                                        r += '<h3 class="popover-header text-center">' + e + "</h3>"
                                    }), n.forEach(function(e, a) {
                                        o.labelColors[a].backgroundColor;
                                        var t = 1 < n.length ? "justify-content-left" : "justify-content-center";
                                        r += '<div class="popover-body d-flex align-items-center ' + t + '"><span class="badge badge-dot"><i class="bg-primary"></i></span>' + e + "</div>"
                                    }), e.html(r)
                                }
                                var t = $(this._chart.canvas),
                                    l = (t.outerWidth(), t.outerHeight(), t.offset().top),
                                    i = t.offset().left,
                                    s = e.outerWidth(),
                                    d = e.outerHeight(),
                                    c = l + o.caretY - d - 16,
                                    p = i + o.caretX - s / 2;
                                e.css({
                                    top: c + "px",
                                    left: p + "px",
                                    display: "block",
                                    "z-index": "100"
                                })
                            } else e.css("display", "none")
                        },
                        callbacks: {
                            label: function(e, a) {
                                var t = a.datasets[e.datasetIndex].label || "",
                                    o = e.yLabel,
                                    n = "";
                                return 1 < a.datasets.length && (n += '<span class="badge badge-primary mr-auto">' + t + "</span>"), n += '<span class="popover-body-value">' + o + "</span>"
                            }
                        }
                    }
                },
                doughnut: {
                    cutoutPercentage: 83,
                    tooltips: {
                        callbacks: {
                            title: function(e, a) {
                                return a.labels[e[0].index]
                            },
                            label: function(e, a) {
                                var t = "";
                                return t += '<span class="popover-body-value">' + a.datasets[0].data[e.index] + "</span>"
                            }
                        }
                    },
                    legendCallback: function(e) {
                        var o = e.data,
                            n = "";
                        return o.labels.forEach(function(e, a) {
                            var t = o.datasets[0].backgroundColor[a];
                            n += '<span class="chart-legend-item">', n += '<i class="chart-legend-indicator" style="background-color: ' + t + '"></i>', n += e, n += "</span>"
                        }), n
                    }
                }
            }
        }, Chart.scaleService.updateScaleDefaults("linear", {
            gridLines: {
                borderDash: [2],
                borderDashOffset: [2],
                color: n.gray[300],
                drawBorder: !1,
                drawTicks: !1,
                lineWidth: 0,
                zeroLineWidth: 0,
                zeroLineColor: n.gray[300],
                zeroLineBorderDash: [2],
                zeroLineBorderDashOffset: [2]
            },
            ticks: {
                beginAtZero: !0,
                padding: 10,
                callback: function(e) {
                    if (!(e % 10)) return e
                }
            }
        }), Chart.scaleService.updateScaleDefaults("category", {
            gridLines: {
                drawBorder: !1,
                drawOnChartArea: !1,
                drawTicks: !1
            },
            ticks: {
                padding: 20
            },
            maxBarThickness: 10
        }), e)), a.on({
            change: function() {
                var e = $(this);
                e.is("[data-add]") && l(e)
            },
            click: function() {
                var e = $(this);
                e.is("[data-update]") && i(e)
            }
        }), {
            colors: n,
            fonts: o,
            mode: t
        }
    }();
    // OrdersChart = function() {
    //     var e, a, t = $("#chart-orders");
    //     $('[name="ordersSelect"]');
    //     t.length && (e = t, a = new Chart(e, {
    //         type: "bar",
    //         options: {
    //             scales: {
    //                 yAxes: [{
    //                     gridLines: {
    //                         lineWidth: 1,
    //                         color: "#dfe2e6",
    //                         zeroLineColor: "#dfe2e6"
    //                     },
    //                     ticks: {
    //                         callback: function(e) {
    //                             if (!(e % 10)) return e
    //                         }
    //                     }
    //                 }]
    //             },
    //             tooltips: {
    //                 callbacks: {
    //                     label: function(e, a) {
    //                         var t = a.datasets[e.datasetIndex].label || "",
    //                             o = e.yLabel,
    //                             n = "";
    //                         return 1 < a.datasets.length && (n += '<span class="popover-body-label mr-auto">' + t + "</span>"), n += '<span class="popover-body-value">' + o + "</span>"
    //                     }
    //                 }
    //             }
    //         },
    //         data: {
    //             labels: ["Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    //             datasets: [{
    //                 label: "Sales",
    //                 data: [25, 20, 30, 22, 17, 29]
    //             }]
    //         }
    //     }), e.data("chart", a))
    // }(),
    

    // if(window.localStorage.getItem('wasche-services')==undefined || window.localStorage.getItem('wasche-services')==null){
    //     location.href="temp_index.php";
    // }
    window.$oc=null;

var data;;
// console.log(data);
var sload=true;
var month="";
var year=""
var month_list = [];
var year_list = [];
var l_c = 0;
var omsg = $("#orders-msg h3");
var co = $(".chart-order");
var oc1=null,oc2=null;
var smonth,cmonth;
var todetails = {};
var day = ["January","February","March","April","May","June","July","August","September","October","November","December"];
var dat;


window.$SalesChart = function(labl,dset) {
    var e, t = $("#chart-sales");
    t.length && (e = t, $a = new Chart(e, {
        type: "line",
        options: {
            scales: {
                yAxes: [{
                    gridLines: {
                        lineWidth: 1,
                        color: Charts.colors.gray[900],
                        zeroLineColor: Charts.colors.gray[900]
                    },
                    ticks: {
                        callback: function(e) {
                            if (!(e % 10)) return "$" + e + "k"
                        }
                    }
                }]
            },
            tooltips: {
                callbacks: {
                    label: function(e, a) {
                        console.log(a.datasets[e.datasetIndex].label);
                        var t = a.datasets[e.datasetIndex].label || "",
                            o = e.yLabel,
                            n = "";
                        return 1 < a.datasets.length && (n += '<span class="popover-body-label mr-auto">' + t + "</span>"), n += '<span class="popover-body-value">$' + o + "k</span>"
                    }
                }
            }
        },
        data: {
            labels: labl,
            datasets: [{
                label: "Success History",
//                 fill: false,
//    borderColor: "#2dce89",
//    backgroundColor: "#2dce89",
//    pointBackgroundColor: "#2dce89",
//    pointBorderColor: "#2dce89",
//    pointHoverBackgroundColor: "#2dce89",
//    pointHoverBorderColor: "#2dce89",
                data: dset[0]
            },
            {
                label: "Failure History",
//                 fill: false,
//    borderColor: "#f5365c",
//    backgroundColor: "#f5365c",
//    pointBackgroundColor: "#f5365c",
//    pointBorderColor: "#f5365c",
//    pointHoverBackgroundColor: "#f5365c",
//    pointHoverBorderColor: "#f5365c",
                data: dset[1]
            }]
        }
    }), e.data("chart", $a))
};
// var progress = document.getElementById('animationProgress');
var orderchart= function (labl,dset,tit,resp,chart_title,id,typel) {
    var e, a, t = $(id);
    
    t.length && (e = t, a = new Chart(e, {
        type: tit,
        options: {
            title:{
                display:true,
                text:(typeof(chart_title)=="number")?day[chart_title-1]:day[parseInt(chart_title)-1],
                fontSize:17
            },
            // legend:{
            //     display:true,
            //     position:'top',
            //     lineDashOffset:1,
            //     lineWidth:1,
            //     strokeStyle:Charts.colors.gray[900],
            //     labels:{
            //         fontColor:"#525f7f",
            //         boxWidth:30,
            //         fontSize:10
            //     }
            // },
            responsive: resp,
            scales: {
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Number Of Clothes'
                      },
                    gridLines: {
                        lineWidth: 1,
                        color: "#dfe2e6",
                        zeroLineColor: "#dfe2e6"
                    },
                    ticks: {
                        callback: function(e) {
                            if ( !(e%1)){return e;  }
                        }
                    }
                }],
                xAxes:[{
                    scaleLabel: {
                        display: true,
                        labelString: 'Day'
                      },
                    ticks:{
                        autoSkip: false,
                        min:0,
                        beginAtZero:true
                    }
                }]
            },
            animation: {
                duration: 1000,
                
                onComplete: function(animation) {
                    window.setTimeout(function() {
                        if(typel == 1){
                        $('.prc1').css({"animation":"exit-load 2s forwards"});
                    $('.prc1').on("animationend",function(){
                        $(".prc1").hide();
                        $('.mcont').show();
                    });
                    $('.prc1').on("webkitAnimationEnd",function(){
                        $(".prc1").hide();                        
                        $('.mcont').show();
                    });    
                    }
                        if(typel == 2){
                            $('.prc2').hide();
                            // $('.prc2').css({"animation-name":"exit-load"});
                            }

                    }, 2000);
                }
            },
            tooltips: {
                callbacks: {
                    label: function(e, a) {
                        console.log("console for order : "+a.datasets[e.datasetIndex].label);
                        var t = a.datasets[e.datasetIndex].label || "",
                            o = e.yLabel,
                            n = "",
                            bgk ="";
                            if(t == "Failure :  "){
                                bgk='style="color:#f5365c"';
                                console.log("F");
                            }
                            else{
                                bgk= 'style="color:#2dce89"';
                                console.log("S");
                            }
                        return 1 < a.datasets.length && (n += '<span class="popover-body-label mr-auto">' + t + "</span>"), n += '<span class="popover-body-value" '+ bgk +'>' + o + "</span>"
                    }
                }
            }
        },
        data: {
            labels: labl,
            datasets:[{
                label: "Success :  ",
                
                fill: false,
   borderColor: "#2dce89",
   backgroundColor: "#2dce89",
   pointBackgroundColor: "#2dce89",
   pointBorderColor: "#2dce89",
   pointHoverBackgroundColor: "#2dce89",
   pointHoverBorderColor: "#2dce89",
                data: dset[0]
            },
            {
                label: "Failure :  ",
                
                fill: false,
   borderColor: "#f5365c",
   backgroundColor: "#f5365c",
   pointBackgroundColor: "#f5365c",
   pointBorderColor: "#f5365c",
   pointHoverBackgroundColor: "#f5365c",
   pointHoverBorderColor: "#f5365c",
                data: dset[1]
            }
        ]
        }
    }), e.data("chart", a))
    console.log("compleeee");
    return a;
}

try {
   data = $('#user-data').data().name
} catch (error) {
    console.error("could not find data");
}


function createmonths(start,end){
    var op="";
    for(var i=(start-1);i<end;i++){
        // if(i==(end-1)){
        //     op = op + "<option selected">
        // }
        op = op + "<option vlaue='" + day[i] + "'>" + day[i] + "</option>";
    }
    return op;
}


function processTotalOrdersData(response,cm,cy,typel){
    console.log(response);
    if(response.s){
        if(response.data==false){
            if(sload==true){
                sload=false;
                $('.prc1').css({"animation":"exit-load 2s forwards"});
            $('.prc1').on("animationend",function(){
                $(".prc1").hide();                
                $('.mcont').show();
            });
            $('.prc1').on("webkitAnimationEnd",function(){
                $(".prc1").hide();
                $('.mcont').show();
            });  
            }
            else{
                setTimeout(function(){
                    $(".prc2").hide();
                    // $(".prc2").css({"animation-name":"exit-load"});

                },3000);
            }
            $(".chart-order").hide();
            $("#orders-msg").find("h3").html("No orders found");
            $("#orders-msg").show();
        }
        else{
            dat = response.data;
            $("#orders-msg").hide();
            $(".chart-order").show();
            if(dat.dates.length>3 && dat.dates.length<=13){
        $("#chart-orders2").show();    
        $("#chart-orders1").hide();    
console.log("1");
            oc1 = orderchart(dat.dates,[dat.success,dat.failed],"line",true,cm,"#chart-orders2",typel);
        }else if(dat.dates.length<=3){
            $("#chart-orders2").show();
            $("#chart-orders1").hide();    
            console.log("2");

            oc1 = orderchart(dat.dates,[dat.success,dat.failed],"bar",true,cm,"#chart-orders2",typel);
            }else{
            $("#chart-orders1").show();
            $("#chart-orders2").hide();    
            console.log("3");

            oc2 = orderchart(dat.dates,[dat.success,dat.failed],"line",false,cm,"#chart-orders1",typel);
            }
            // oc1 = $orderchart(dat.dates,dat.success,dat.failed,e)
            // $('.prc1').css({"animation-name":"exit-load"});
        }
    }else{
        console.log("error finding data");
    }

}
function getdata(cy,cm,typel){
    console.log($("#csrf").serialize()+"&year="+cy+"&month="+cm+"&email="+$("#user-log").data().name.e);
    $.ajax({
        type: "POST",
        url: './ajax/get_data/',
        data: $("#csrf").serialize()+"&year="+cy+"&month="+cm+"&email="+$("#user-log").data().name.e,
        success: function( response ) {
            var response = $.parseJSON(response);
            console.log(response)
            todetails[String(cy)][day[cm-1]].data = response;
            processTotalOrdersData(response,cm,cy,typel);
        },
        error:function (jqXHR, exception) {
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404]';
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    console.log(msg);
                // bootbox.alert({
                // 			title:"Error",
                // 			message:msg+" Please Try again later. Thank you.",
                // 			backdrop:true
                //         });
        }
            
    });
}

function initDashboard(){
// print(data)
if(data){
    if(data.m){
        console.log("f m");
        smonth= data.m[0];
        cmonth=data.m[1];
        
    }
    if(data.y){
        console.log("f y");
        year = "";

        for(var i=0;i<data.y.years.length;i++){
            year = year + "<option value='" + data.y.years[i] + "'> " + data.y.years[i] + "</option>";
            year_list.push(data.y.years[i]);
        }
        var dyy =day[cmonth - 1 ];

        todetails[String(year_list[0])] = {};
        todetails[String(year_list[0])][dyy] = { "data" : {} };

        console.log(year);
        $("#year1").html(year);
        
    }


    if(year_list.length==1){
        if(smonth>cmonth){
            var op=createmonths(smonth,12);
            $("#month1").html(op);
         
        }else{

            var op=createmonths(smonth,cmonth);
            $("#month1").html(op);
        }
    }else{
        var op=createmonths(1,cmonth);
        $("#month1").html(op);
        
    }

    getdata(data.y.years[0],cmonth,1);
// $("#year1").on("change",function(){
    
// })
$(".filterto").on("click",function(){
    console.log("clicked");
    $(".prc2").show();
    // $(".prc2").css({"animation-name":"enter-load"});
    var y = $("#year1").prop("selectedIndex");
    var m = $("#month1").prop("selectedIndex");
    setTimeout(function(){
        if($("#year1").val() in todetails && $("#month1").val() in todetails[$("#year1").val()] ){
            processTotalOrdersData(todetails[$("#year1").val()][$("#month1").val()].data,m+1,$("#year1").val(),2);
            console.log("found same data");
        
        }
        else if($("#year1").val() in todetails){
            todetails[$("#year1").val()][$("#month1").val()] = {"data":{}};
            console.log("found same year");
            getdata($("#year1").val(),day.indexOf($("#month1").val())+1,2);
        }
        else{
            console.log("Did not found anything");
            todetails[$("#year1").val()] = {};
            todetails[$("#year1").val()][$("#month1").val()] = {"data":{}};
            getdata($("#year1").val(),day.indexOf($("#month1").val())+1,2);
    
        }
        
    },1000);
    $(".open-filterto1").css({"pointer-events":"all"}); 
        $(".filter-cont").toggleClass("close"); 
        setTimeout(function(){ 
            $(".filter-cont").toggleClass("close"); 
            $(".filter-cont").toggleClass("open") 
        },1200);
    
});


$(".open-filterto1").on("click",function(){
    $(".open-filterto1").css({"pointer-events":"none"}); 
    $(".filter-cont").toggleClass("open"); 
});


$("#fclose1").on("click",function(){
    $(".open-filterto1").css({"pointer-events":"all"}); 
    $(".filter-cont").toggleClass("close"); 
    setTimeout(function(){ 
        $(".filter-cont").toggleClass("close"); 
        $(".filter-cont").toggleClass("open") 
    },1200);
});

// $(".filterto").on("click",function(){
//     $(".open-filterto1").css({"pointer-events":"all"}); 
//     $(".filter-cont").toggleClass("close"); 
//     setTimeout(function(){ 
//         $(".filter-cont").toggleClass("close"); 
//         $(".filter-cont").toggleClass("open") 
//     },1200);
// });

$("#year1").on("change",function(){
    $("#loadmonths1").css("display","flex");
    var months="";
    var y = $("#year1").prop("selectedIndex");

    if(y==(year_list.length -1)){
        if(smonth>cmonth){
            months = createmonths(smonth,12);

        }else{
        months = createmonths(smonth,cmonth);

        }
    }else{
        months = createmonths(1,cmonth);
    }
    $("#month1").html(months);
    setTimeout(function(){
    // $("#loadmonths1").hide();
    $("#loadmonths1").css("display","none");


    },1200);
})
}
}

        // function tryParseJSON(str) {
        //     try {
        //         var Obj = JSON.parse(str);
        //         if (Obj && typeof Obj === "object") {
        //             return Obj;
        //         }
        //     } catch (e) {}
        //     return false;
        // }
        $(document).ready(function(){
        $('.top-logout-btn').on('click',function(){
            
            // window.localStorage.removeItem('wasche-services');
            // window.localStorage.clear();
            // $('.cust-ul1').toggleClass('active');
            // $('.cust-ul2').toggleClass('active');
            
            // var $clientZoneLink = $('.header-client-zone-wrapper');
            // $clientZoneLink.find('-zone-link').remove();
            // $clientZoneLink.prepend("<a class='client-zone-link' data-close-location='right' href='#'><i class='fa fa-user' aria-hidden='true'></i></a>");
        // location.reload();
        location.href = "/ajax/logout/";
        // $.ajax({
        //     type: "POST",
        //     url: '/ajax/logout/',
        //     data: $("#csrf").serialize(),
        //     success: function( response ) {
        //         // var response = $.parseJSON(response);
        //         console.log(response);
        //         location.href = "/u/";

        //     },
        //     error:function (jqXHR, exception) {
        //                 var msg = '';
        //                 if (jqXHR.status === 0) {
        //                     msg = 'Not connect.\n Verify Network.';
        //                 } else if (jqXHR.status == 404) {
        //                     msg = 'Requested page not found. [404]';
        //                 } else if (jqXHR.status == 500) {
        //                     msg = 'Internal Server Error [500].';
        //                 } else if (exception === 'parsererror') {
        //                     msg = 'Requested JSON parse failed.';
        //                 } else if (exception === 'timeout') {
        //                     msg = 'Time out error.';
        //                 } else if (exception === 'abort') {
        //                     msg = 'Ajax request aborted.';
        //                 } else {
        //                     msg = 'Uncaught Error.\n' + jqXHR.responseText;
        //                 }
        //                 console.log(msg);
        //             // bootbox.alert({
        //             // 			title:"Error",
        //             // 			message:msg+" Please Try again later. Thank you.",
        //             // 			backdrop:true
        //             //         });
        //     }
                
        // });
            // ClientZone.updateClientIcon();
        
        });
        console.log('starting');
        var $client=$("#user-log").data().name;
        if($client!="no"){
        //   var $client = JSON.parse(window.localStorage.getItem("wasche-services"));
          $('.user-name').html($client.fn);
        if ($client.profile_image!='') {
            $('.avatar').html("<img class='Image placeholder'></img>");
                  console.log('1');
          $('.avatar img').attr('src',$client.profile_image);
          $('.avatar img').attr('data',$client.profile_image);
          $('.avatar img').css('width','36px');
          $('.avatar img').css('height','36px');

        //   var ele=document.getElementsByClassName('cust-top-img');
        //   var hei=ele[0].height;
        // var wid=ele[0].width;
        // console.log(hei);
        // console.log(wid);

      
      }
     
      else{
       if ($client.fn) {
        console.log('3');
           $('.avatar img').remove();
          $('.avatar').html( $client.fn[0]);
          $('.avatar').css('font-size','1rem');
          
      }
    }
      console.log('added icon');
        }
      });
//# sourceMappingURL=_site_dashboard_free/assets/js/dashboard-free.js.map